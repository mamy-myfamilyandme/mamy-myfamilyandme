name: Full CI

# 모든 푸시와 PR에서 실행
on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main, develop]

jobs:
  # 변경사항 감지
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'

  # 백엔드 CI (변경사항 있을 때만)
  backend-ci:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4

      - name: Python 3.13 설치
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: uv 설치
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: 의존성 설치
        run: uv sync

      - name: 린팅 및 포맷팅
        run: |
          uv run ruff check .
          uv run ruff format --check .

      - name: Django 검사
        run: |
          uv run python manage.py check
          uv run python manage.py makemigrations --check --dry-run
        env:
          DJANGO_SETTINGS_MODULE: config.settings

      - name: 테스트
        run: uv run pytest
        env:
          DJANGO_SETTINGS_MODULE: config.settings

  # 프론트엔드 CI (변경사항 있을 때만)
  frontend-ci:
    needs: changes
    if: ${{ needs.changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend/MamyApp
    steps:
      - uses: actions/checkout@v4

      - name: Node.js 설치
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/MamyApp/package-lock.json'

      - name: 의존성 설치
        run: npm ci

      - name: TypeScript & ESLint
        run: |
          npx tsc --noEmit
          npm run lint

      - name: 테스트
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true

  # 모든 작업 성공 확인
  ci-success:
    needs: [backend-ci, frontend-ci]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: CI 결과 확인
        run: |
          if [[ "${{ needs.backend-ci.result }}" == "failure" ]] || [[ "${{ needs.frontend-ci.result }}" == "failure" ]]; then
            echo "CI 실패!"
            exit 1
          fi
          echo "모든 CI 통과! ✅"
